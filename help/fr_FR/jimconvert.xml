<?xml version="1.0" encoding="UTF-8"?>
<!--
 * This file is part of the Jimlab module made for Scilab
 * Copyright (C) 2017 - ENSIM, Université du Maine - Camille CHAILLOUS
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-fr.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" 
		xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" 
		xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org"  
		xml:lang="fr" xml:id="jimconvert">
    <refnamediv>
        <refname>jimconvert</refname>
        <refpurpose>Conversion du type d'encodage d'une image</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Syntaxes</title>
        <synopsis>
            convertedImage = jimconvert(image, encoding)
			convertedImage = jimconvert(image, encoding, transparencyColor)
			convertedImage = jimconvert(image, encoding, , , argb?)
			convertedImage = jimconvert(image, encoding, , , , colorsBits)
			convertedImage = jimconvert(image, encoding, , colormap)
			convertedImage = jimconvert(image, encoding, transparencyColor, argb?)
			convertedImage = jimconvert(image, encoding, transparencyColor, colorsBits)
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>image</term>
                <listitem>
                    <para>
						Cet argument d'entrée peut prendre les formes suivantes :
							<itemizedlist>
								<listitem>
									<para>
									un objet <literal>jimage</literal>
									</para>
								</listitem>
								<listitem>
									<para>
									une matrice d'entiers sur 32 bits (signés ou non signés) qui donne les couleurs d'un pixels en RGBA ou en ARGB (voir Matplot_properties)
									<warning>Par défaut l'argument <literal>argb?</literal> est <literal>%f</literal></warning>
									</para>
								</listitem>
								<listitem>
									<para>
									une matrice de numéros de couleurs telles que répertoriées dans la table de couleur définie par l'argument <literal>colormap</literal> alors obligatoire. 
									</para>
								</listitem>
								<listitem>
									<para>
									une hypermatrice RGB, RGBA ou ARGB d'entiers sur 8 bits (signés ou non signés)
									</para>
								</listitem>
								<listitem>
									<para>
									une matrice d'entiers sur 16 bits (signés ou non signés) qui donne les couleurs des pixels en RGB ou RGBA.
									<warning>Par défaut,  l'encodage binaire <literal>colorsBits</literal> utilisé est "444"</warning>
									</para>
								</listitem>
								<listitem>
									<para>
									une matrice booléenne
									</para>
								</listitem>
						</itemizedlist>
					</para>					
                </listitem>
			</varlistentry>
			<varlistentry>
				<term>encoding</term> 
                <listitem>
                    <para>
						Mot <emphasis role="bold">"gray"</emphasis> ou <emphasis role="bold">"rgb"</emphasis> : encodage souhaité en sortie
					</para>
                </listitem>
			</varlistentry>
			<varlistentry>
				<term>transparencyColor</term> 
                <listitem>
                    <para>
						Un vecteur à trois coefficients dans l'intervalle [0;255]. Elle correspond à la nuance de couleur qui sera utilisée pour tous les pixels ayant leur transparence au maximum. Par défaut, le blanc est choisi comme couleur de transparence. 
					</para>
                </listitem>
			</varlistentry>
			<varlistentry>
				<term>argb?</term> 
                <listitem>
                    <para>
						Un booléen : <literal>%t</literal> si l'image d'entrée est encodée en ARGB, <literal>%f</literal> si l'image est encodée en RGBA. Par défaut, la valeur de cet argument est <literal>%f</literal>.
					</para>
                </listitem>
			</varlistentry>
			<varlistentry>
				<term>Type</term> 
                <listitem>
                    <para>
						Une chaîne de caractère donnant le type d'encodage pour une matrice en entrée codée en uint16 : 
						<itemizedlist>
								<listitem>
									<para>
									'444' indique que chaque couleur est codée sur 4 bits
									</para>
								</listitem>
								<listitem>
									<para>
									'555' indique que chaque couleur est codée sur 5 bits
									</para>
								</listitem>
								<listitem>
									<para>
									'4444' indique que chaque couleur ainsi que la transparence est codée sur 4 bits
									</para>
								</listitem>
								<listitem>
									<para>
									'5551' indique que chaque couleur est codé sur 5 bits et la transparence sur 1 bit. 
									</para>
								</listitem>
						</itemizedlist>
					</para>
                </listitem>
			</varlistentry>
			<varlistentry>
				<term>colormap</term> 
                <listitem>
                    <para>
						Une matrice de dimensions M x 3. M est le nombre de couleurs de la colormap. Pour chaque ligne, les trois coefficients définissent l'intensité du rouge, du vert et du bleu normalisée entre 0 et 1. 
					</para>
                </listitem>
			</varlistentry>
			<varlistentry>
				<term>convertedImage</term> 
                <listitem>
                    <para>
						<itemizedlist>
							<listitem>
							Un objet de type <litéral>jimage</litéral> dont le champ <literal>.image</literal> a l'encodage correspondant à l'argument <literal>encoding</literal>
							</listitem>
							<listitem>
							une matrice de niveaux de gris encodée en entiers 8 bits non signés
							</listitem>
							<listitem>
							une hypermatrice à 3 couches encodée en uint8
							</listitem>
						</itemizedlist>
					</para>
                </listitem>
			</varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            Cette fonction permet de convertir le type d'encodage d'une image. Une image encodée en RGBA peut être convertie en RGB ou en niveaux de gris. Une image encodée en RGB peut être convertie en niveaux de gris. 
		</para>
		<para>
			Si un objet <code>jimage</code> est donné en entrée, l'objet de sortie sera aussi de type <literal>jimage</literal> avec les champs <code>.title</code> et <code>.format</code> conservés et le champ <literal>.transparencyColor</literal> converti. Sinon, l'objet <literal>convertedImage</literal> est une matrice ou une hypermatrice encodée en entiers 8 bits non signés. 
        </para>
		<para>
			Une image booléenne est traduite en noir (<literal>%f</literal>) et blanc (<literal>%t</literal>).
		</para>
    </refsection>
    <refsection>
        <title>Exemples</title>
        <programlisting role="example"><![CDATA[ 
//Chargement de l'image depuis un fichier
path = jimlabPath("/") + 'tests/images/noError/rgba.png';
jimage = jimread(path)
image = jimage.image;

//Conversion en niveaux de gris
jgray = jimconvert(jimage, 'gray')
gray = jimconvert(image, 'gray');
typeof(gray)

//Conversion en RGB
path = jimlabPath("/") + 'tests/images/logoEnsim.png';
jimage2 = jimread(path)
image2 = jimage2.image;
transparencyColor = uint8(cat(3, 200, 200, 200));
jrgb = jimconvert(jimage2, 'rgb', transparencyColor)
rgb = jimconvert(image2, 'rgb', transparencyColor);
typeof(rgb)

//Affichage des images converties
clf
subplot(2,2,1), jimdisp(jimage,,'info')
subplot(2,2,2), jimdisp(jgray,,'info')
subplot(2,2,3), jimdisp(jimage2,,'info')
subplot(2,2,4), jimdisp(jrgb,,'info')
 ]]></programlisting>
 <scilab:image>
//Chargement de l'image depuis un fichier
path = jimlabPath("/") + 'tests/images/noError/rgba.png';
jimage = jimread(path)

//Conversion en niveaux de gris
jgray = jimconvert(jimage, 'gray')

//Conversion en RGB
path = jimlabPath("/") + 'tests/images/logoEnsim.png';
jimage2 = jimread(path)
transparencyColor = uint8(cat(3, 200, 200, 200));
jrgb = jimconvert(jimage2, 'rgb', transparencyColor)

//Affichage des images converties
clf
subplot(2,2,1)
jimdisp(jimage,,'info')
subplot(2,2,2)
jimdisp(jgray,,'info')
subplot(2,2,3)
jimdisp(jimage2,,'info')
subplot(2,2,4)
jimdisp(jrgb,,'info')
 </scilab:image>
	</refsection>
    <refsection role="see also">
        <title>Voir Aussi</title>
        <simplelist type="inline">
			<member>
                <link linkend="jimage_properties">jimage_properties</link>
            </member>
			<member>
                <link linkend="colormap">colormap</link>
            </member>
			<member>
                <link linkend="Matplot_properties">Matplot_properties</link>
            </member>
        </simplelist>
    </refsection>
    <refsection>
        <title>Historique</title>
        <revhistory>
            <revision>
                <revnumber>0.1 - 2017-05</revnumber>
                <revremark>Publication initiale du module Jimlab</revremark>
            </revision>
        </revhistory>
    </refsection>
</refentry>
