<?xml version="1.0" encoding="UTF-8"?>
<!--
 * This file is part of the Jimlab module made for Scilab
 * Copyright (C) 2017 - ENSIM, UniversitÃ© du Maine - Camille CHAILLOUS
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-fr.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" 
		xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" 
		xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org"  
		xml:lang="en" xml:id="jimconvert">
    <refnamediv>
        <refname>jimconvert</refname>
        <refpurpose>Conversion of the encoding type of an image</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Syntax</title>
        <synopsis>
            convertedImage = jimconvert(image, encoding)
			convertedImage = jimconvert(image, encoding, transparencyColor)
			convertedImage = jimconvert(image, encoding, , , argb?)
			convertedImage = jimconvert(image, encoding, , , , colorsBits)
			convertedImage = jimconvert(image, encoding, , colormap)
			convertedImage = jimconvert(image, encoding, transparencyColor, argb?)
			convertedImage = jimconvert(image, encoding, transparencyColor, colorsBits)
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>image</term>
                <listitem>
                    <para>
						This argument can be :
							<itemizedlist>
								<listitem>
									<para>
									a <literal>jimage</literal> object
									</para>
								</listitem>
								<listitem>
									<para>
									a matrix of 32 bits integers (signed or unsigned) which gives the colors of a pixel in RGBA or ARGB (see Matplot_properties)
									<warning>By default, the argument <literal>argb?</literal> is <literal>%f</literal></warning>
									</para>
								</listitem>
								<listitem>
									<para>
									a matrix of color numbers as indexed in the table color defined by <literal>colormap</literal> which is in this case necessary
									</para>
								</listitem>
								<listitem>
									<para>
									a hypermatrix RGB, RGBA or ARGB of 8 bits integers (signed or unsigned)
									</para>
								</listitem>
								<listitem>
									<para>
									a matrix of 16 bits integers (signed or unsigned) which gives the color of each pixel in RGB or RGBA
									<warning>By default,  binary encoding <literal>colorsBits</literal> used is "444"</warning>
									</para>
								</listitem>
								<listitem>
									<para>
									a matrix of boolean
									</para>
								</listitem>
						</itemizedlist>
					</para>					
                </listitem>
			</varlistentry>
			<varlistentry>
				<term>encoding</term> 
                <listitem>
                    <para>
						Word <emphasis role="bold">"gray"</emphasis> or <emphasis role="bold">"rgb"</emphasis> : output encoding wanted
					</para>
                </listitem>
			</varlistentry>
			<varlistentry>
				<term>transparencyColor</term> 
                <listitem>
                    <para>
						A vector with three components in the intervalle [0;255]. It defines the color shade used for all transparent pixels. By default, white is used a transparency color.
					</para>
                </listitem>
			</varlistentry>
			<varlistentry>
				<term>argb?</term> 
                <listitem>
                    <para>
						a boolean : <literal>%t</literal> it the input image is encoded in ARGB, <literal>%f</literal> if the input image is encoded in RGBA. By default, the value of this argument is <literal>%f</literal>.
					</para>
                </listitem>
			</varlistentry>
			<varlistentry>
				<term>colorsBits</term> 
                <listitem>
                    <para>
						A string which gives the binary encoding for an input matrix of uint16 : 
						<itemizedlist>
								<listitem>
									<para>
									'444' indicates that each color is encoded on 4 bits
									</para>
								</listitem>
								<listitem>
									<para>
									'555' indicates that each color is encoded on 5 bits
									</para>
								</listitem>
								<listitem>
									<para>
									'4444' indicates that each color and the transparency are encoded on 4 bits
									</para>
								</listitem>
								<listitem>
									<para>
									'5551' indicates that each color is encoded on 5 bits and the transparency on 1 bits
									</para>
								</listitem>
						</itemizedlist>
					</para>
                </listitem>
			</varlistentry>
			<varlistentry>
				<term>colormap</term> 
                <listitem>
                    <para>
						A M x 3 matrix. M is the number of colors in the colormap. In each line, the three components define the intensity of red, green and blue normalized between 0 and 1.
					</para>
                </listitem>
			</varlistentry>
			<varlistentry>
				<term>convertedImage</term> 
                <listitem>
                    <para>
						<itemizedlist>
							<listitem>
							An object <literal>jimage</literal> whose <literal>.image</literal> field has the encoding given by the input argument <literal>encoding</literal>
							</listitem>
							<listitem>
							A matrix of gray levels encoded in uint8
							</listitem>
							<listitem>
							A hypermatrix with three layers encoded in uint8
							</listitem>
						</itemizedlist>
					</para>
                </listitem>
			</varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            This function converts the encoding type of an image. A RGBA encoded image can be converted into RGB or gray levels. A RGB encoded image can be converted into a gray levels image. A boolean image is converted into black (<literal>%f</literal>) and white (<literal>%t</literal>).
		</para>
		<para>
			If a <code>jimage</code> object is given, the output object is also a <code>jimage</code> object with the same <code>.title</code> et <code>.format</code> fields and with the field <literal>.transparencyColor</literal> converted. Otherwise, the object <literal>convertedImage</literal> is a matrix or a hypermatrix of uint8. 
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[ 
//Loading the image from an image file
path = jimlabPath("/") + 'tests/images/noError/rgba.png';
jimage = jimread(path)
image = jimage.image;

//Conversion in gray levels
jgray = jimconvert(jimage, 'gray')
gray = jimconvert(image, 'gray');
typeof(gray)

//Conversion in RGB
path = jimlabPath("/") + 'tests/images/logoEnsim.png';
jimage2 = jimread(path)
image2 = jimage2.image;
transparencyColor = uint8(cat(3, 200, 200, 200));
jrgb = jimconvert(jimage2, 'rgb', transparencyColor)
rgb = jimconvert(image2, 'rgb', transparencyColor);
typeof(rgb)

//Display of the images before and after conversion
clf
subplot(2,2,1), jimdisp(jimage,,'info')
subplot(2,2,2), jimdisp(jgray,,'info')
subplot(2,2,3), jimdisp(jimage2,,'info')
subplot(2,2,4), jimdisp(jrgb,,'info')
 ]]></programlisting>
 <scilab:image>
//Chargement de l'image depuis un fichier
path = jimlabPath("/") + 'tests/images/noError/rgba.png';
jimage = jimread(path)

//Conversion en niveaux de gris
jgray = jimconvert(jimage, 'gray')

//Conversion en RGB
path = jimlabPath("/") + 'tests/images/logoEnsim.png';
jimage2 = jimread(path)
transparencyColor = uint8(cat(3, 200, 200, 200));
jrgb = jimconvert(jimage2, 'rgb', transparencyColor)

//Affichage des images converties
clf
subplot(2,2,1)
jimdisp(jimage,,'info')
subplot(2,2,2)
jimdisp(jgray,,'info')
subplot(2,2,3)
jimdisp(jimage2,,'info')
subplot(2,2,4)
jimdisp(jrgb,,'info')
 </scilab:image>
	</refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
			<member>
                <link linkend="jimage_properties">jimage_properties</link>
            </member>
			<member>
                <link linkend="colormap">colormap</link>
            </member>
			<member>
                <link linkend="Matplot_properties">Matplot_properties</link>
            </member>
        </simplelist>
    </refsection>
    <refsection>
        <title>History</title>
        <revhistory>
            <revision>
                <revnumber>0.1 - 2017-05</revnumber>
                <revremark>First release of Jimlab</revremark>
            </revision>
        </revhistory>
    </refsection>
</refentry>
