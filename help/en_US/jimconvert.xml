<?xml version="1.0" encoding="UTF-8"?>
<!--
 * This file is part of Jimlab, an external module coded for Scilab
 * and dedicated to image processing.
 *
 * Copyright (C) 2017 - ENSIM, UniversitÃ© du Maine - Camille CHAILLOUS
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms are also
 * available at http://www.cecill.info/licences/Licence_CeCILL_V2.1-fr.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
        xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML"
        xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org"
        xml:lang="en" xml:id="jimconvert">
    <refnamediv>
        <refname>jimconvert</refname>
        <refpurpose>Conversion of the encoding type of an image</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Syntax</title>
        <synopsis>
            convertedImage = jimconvert(image, encoding)
            convertedImage = jimconvert(image, encoding, transparencyColor)
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>image</term>
                <listitem>
                    <para>
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <emphasis role="bold">jimage object</emphasis> : with RGB or
                                    RGBA encoded field <literal>.image</literal>.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis role="bold">hypermatrix</emphasis> : RGB or RGBA of
                                    int8 or uint8, or of equivalent decimal numbers in [0, 255],
                                    in [-128, 127] or normalized in the interval [0, 1].
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <emphasis role="bold">matrix</emphasis>
                                    <itemizedlist>
                                        <listitem>
                                            <para>
                                                of uint16 or int16 with binary segmentation
                                                "rgba4444" or of equivalent decimal numbers in
                                                [0, 2<superscript>16</superscript>-1] or in
                                                [-2<superscript>15</superscript>;
                                                2<superscript>15</superscript>-1].
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                of uint32 or int32 with binary segmentation
                                                "rgba8888", or of equivalent decimal numbers in
                                                [0, 2<superscript>32</superscript>-1] or in
                                                [-2<superscript>31</superscript>,
                                                2<superscript>32</superscript>-1]
                                            </para>
                                        </listitem>
                                        <listitem>
                                            <para>
                                                of booleans
                                            </para>
                                        </listitem>
                                    </itemizedlist>
                                </para>
                            </listitem>
                        </itemizedlist>
                        If the input image has a differenct encoding,
                        <function>jimstandard</function>() should be used before
                        <function>jimconvert</function>().
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>encoding</term>
                <listitem>
                    <para>
                        Word <emphasis role="bold">"gray"</emphasis> or
                        <emphasis role="bold">"rgb"</emphasis> : output encoding wanted
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>transparencyColor</term>
                <listitem>
                    <para>
                        <itemizedlist>
                            <listitem>
                                <para>
                                    A vector or a hypermatrix with three components in the interval [0, 255].
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    A scalar in the intervalle [0, 255] if the argument
                                    <literal>encoding</literal> is <literal>"gray"</literal>.
                                </para>
                            </listitem>
                        </itemizedlist>
                        It defines the color shade allocated to all transparent pixels. By default,
                        white is used a transparency color. It is only used when the input image is
                        encoded in RGBA.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>convertedImage</term>
                <listitem>
                    <para>
                        An object <literal>jimage</literal> whose <literal>.image</literal> field
                        has the encoding given by the input argument <literal>encoding</literal>,
                        a matrix of gray levels encoded in uint8 or a hypermatrix RGB encoded in
                        uint8.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            This function converts the encoding type of an image. A RGBA encoded image can be
            converted into RGB or gray levels. A RGB encoded image can be converted into a gray
            levels image. A boolean image is converted into black (<literal>%f</literal>) and
            white (<literal>%t</literal>).
        </para>
        <para>
            If a <literal>jimage</literal> object is given, the output object is also a
            <literal>jimage</literal> object with the same <literal>.title</literal> et
            <literal>.format</literal> fields and with the field <literal>.transparencyColor</literal>
            converted. Otherwise, the object <literal>convertedImage</literal> is a matrix or a
            hypermatrix of uint8.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[
// Loading the image from an image file
path = jimlabPath("/") + 'tests/images/noError/rgba.png';
Jimage = jimread(path)
image = Jimage.image;

// Conversion in gray levels
jgray = jimconvert(Jimage, 'gray')
gray = jimconvert(image, 'gray');

// Conversion in RGB
path = jimlabPath("/") + 'tests/images/logoEnsim_rgba.png';
Jimage2 = jimread(path)
image2 = Jimage2.image;
transparencyColor = uint8(cat(3, 200, 200, 200));
jrgb = jimconvert(Jimage2, 'rgb', transparencyColor)
rgb = jimconvert(image2, 'rgb', transparencyColor);

// Display of the images before and after conversion
clf
subplot(2,2,1), jimdisp(Jimage,,'info')
subplot(2,2,2), jimdisp(jgray,,'info')
subplot(2,2,3), jimdisp(Jimage2,,'info')
subplot(2,2,4), jimdisp(jrgb,,'info')
 ]]></programlisting>
        <scilab:image>
            <!--//Chargement de l'image depuis un fichier
path = jimlabPath("/") + 'tests/images/noError/rgba.png';
Jimage = jimread(path)

//Conversion en niveaux de gris
jgray = jimconvert(Jimage, 'gray')

//Conversion en RGB
path = jimlabPath("/") + 'tests/images/logoEnsim_rgba.png';
Jimage2 = jimread(path)
transparencyColor = uint8(cat(3, 200, 200, 200));
jrgb = jimconvert(Jimage2, 'rgb', transparencyColor)

//Affichage des images converties
clf
subplot(2,2,1)
jimdisp(Jimage,,'info')
subplot(2,2,2)
jimdisp(jgray,,'info')
subplot(2,2,3)
jimdisp(Jimage2,,'info')
subplot(2,2,4)
jimdisp(jrgb,,'info')
-->
        </scilab:image>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="jimage_properties">jimage_properties</link>
            </member>
            <member>
                <link linkend="jimstandard">jimstandard</link>
            </member>
        </simplelist>
    </refsection>
    <refsection>
        <title>History</title>
        <revhistory>
            <revision>
                <revnumber>0.1 - 2017-06</revnumber>
                <revremark>First release of Jimlab</revremark>
            </revision>
        </revhistory>
    </refsection>
</refentry>
